/**
 * Composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (Decode) JWT Token 
 * ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Library ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (Client-side only)
 * @param {string} token - JWT Token ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™
 * @returns {object|null} - Payload Object ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
 */
export const useJwtDecoder = (token) => {
    // üí° ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô Client-side ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ window.atob()
    if (!process.client) {
        console.warn("JWT Decoder is skipped during Server-Side Rendering (SSR).");
        return null;
    }

    if (!token || typeof token !== 'string') {
        return null;
    }

    try {
        // 1. ‡πÅ‡∏¢‡∏Å Token ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô Header, Payload, Signature
        const [header, payloadBase64, signature] = token.split('.');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        if (!payloadBase64) {
            return null;
        }

        // 2. ‡πÅ‡∏õ‡∏•‡∏á Base64Url (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JWT) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Base64 ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        let base64 = payloadBase64.replace(/-/g, '+').replace(/_/g, '/');

        // 3. ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Base64 ‡πÄ‡∏õ‡πá‡∏ô String
        // (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° Browser ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        const jsonPayload = decodeURIComponent(
            window.atob(base64)
                .split('')
                .map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                })
                .join('')
        );

        // 4. ‡πÅ‡∏õ‡∏•‡∏á JSON String ‡πÄ‡∏õ‡πá‡∏ô JavaScript Object ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return JSON.parse(jsonPayload);

    } catch (error) {
        console.error("JWT Decode Error:", error);
        return null;
    }
};